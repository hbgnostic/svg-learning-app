{"version":3,"sources":["SVGLearningApp.js","App.js","reportWebVitals.js","index.js"],"names":["SVGLearningApp","x","setX","useState","y","setY","width","setWidth","height","setHeight","color","setColor","showCoordinateSystem","setShowCoordinateSystem","svgSize","setSvgSize","useEffect","handleResize","Math","min","window","innerWidth","addEventListener","removeEventListener","handleChange","setter","e","value","target","type","parseInt","isNaN","max","_jsxs","className","children","_jsx","onChange","checked","fill","_Fragment","x1","y1","x2","y2","stroke","strokeWidth","fontSize","Info","concat","App","Router","basename","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.57734793.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Info } from 'lucide-react';\nimport './App.css';\n\nconst SVGLearningApp = () => {\n  const [x, setX] = useState(90);\n  const [y, setY] = useState(10);\n  const [width, setWidth] = useState(20);\n  const [height, setHeight] = useState(20);\n  const [color, setColor] = useState('#0000FF');\n  const [showCoordinateSystem, setShowCoordinateSystem] = useState(false);\n  const [svgSize, setSvgSize] = useState(200);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSvgSize(Math.min(window.innerWidth - 40, 400));\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleChange = (setter) => (e) => {\n    const value = e.target.type === 'number' ? parseInt(e.target.value) : e.target.value;\n    setter(e.target.type === 'number' ? (isNaN(value) ? 0 : Math.max(0, Math.min(value, svgSize))) : value);\n  };\n\n  return (\n    <div className=\"p-4 max-w-3xl mx-auto app-container\">\n      <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold mb-4\">Interactive SVG Learning App</h1>\n      \n      <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\n        <h2 className=\"text-lg sm:text-xl font-semibold mb-2\">Introduction to SVG</h2>\n        <p className=\"text-sm sm:text-base\">SVG (Scalable Vector Graphics) is an XML-based format for vector graphics. SVG images can be scaled up or down without losing quality.</p>\n        <p className=\"text-sm sm:text-base mt-2\">The interactivity in this app teaches users how to manipulate basic SVG properties such as position, size, and color of shapes, and understand the SVG coordinate system.</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\">\n        <div className=\"form-group\">\n          <label className=\"block mb-2\">\n            X Position:\n            <input\n              type=\"number\"\n              value={x}\n              onChange={handleChange(setX)}\n              className=\"ml-2 p-1 border rounded w-full sm:w-20\"\n              min=\"0\"\n              max={svgSize - width}\n            />\n          </label>\n          <label className=\"block mb-2\">\n            Y Position:\n            <input\n              type=\"number\"\n              value={y}\n              onChange={handleChange(setY)}\n              className=\"ml-2 p-1 border rounded w-full sm:w-20\"\n              min=\"0\"\n              max={svgSize - height}\n            />\n          </label>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"block mb-2\">\n            Width:\n            <input\n              type=\"number\"\n              value={width}\n              onChange={handleChange(setWidth)}\n              className=\"ml-2 p-1 border rounded w-full sm:w-20\"\n              min=\"1\"\n              max={svgSize - x}\n            />\n          </label>\n          <label className=\"block mb-2\">\n            Height:\n            <input\n              type=\"number\"\n              value={height}\n              onChange={handleChange(setHeight)}\n              className=\"ml-2 p-1 border rounded w-full sm:w-20\"\n              min=\"1\"\n              max={svgSize - y}\n            />\n          </label>\n        </div>\n      </div>\n\n      <div className=\"form-group svg-controls mb-4 flex flex-col sm:flex-row items-center justify-center\">\n        <label className=\"flex items-center mb-2 sm:mb-0 sm:mr-4\">\n          Color:\n          <input\n            type=\"color\"\n            value={color}\n            onChange={handleChange(setColor)}\n            className=\"ml-2 p-1 border rounded\"\n          />\n        </label>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            checked={showCoordinateSystem}\n            onChange={() => setShowCoordinateSystem(!showCoordinateSystem)}\n            className=\"mr-2\"\n          />\n          Show Coordinate System\n        </label>\n      </div>\n\n      <svg width={svgSize} height={svgSize} className=\"border mb-4 mx-auto\">\n        <rect width=\"100%\" height=\"100%\" fill=\"lightgrey\" />\n        {showCoordinateSystem && (\n          <>\n            <line x1=\"0\" y1=\"0\" x2={svgSize} y2=\"0\" stroke=\"black\" strokeWidth=\"0.5\" />\n            <line x1=\"0\" y1=\"0\" x2=\"0\" y2={svgSize} stroke=\"black\" strokeWidth=\"0.5\" />\n            <text x={svgSize - 10} y=\"10\" fontSize=\"10\" fill=\"black\">x</text>\n            <text x=\"5\" y={svgSize - 10} fontSize=\"10\" fill=\"black\">y</text>\n          </>\n        )}\n        <rect x={x} y={y} width={width} height={height} fill={color} />\n      </svg>\n\n      <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\n        <h2 className=\"text-lg sm:text-xl font-semibold mb-2 flex items-center\">\n          <Info className=\"mr-2\" /> SVG Explanation\n        </h2>\n        <p className=\"text-sm sm:text-base\">\n          The rectangle is positioned at ({x}, {y}) with a width of {width} and a height of {height}.\n          Its color is {color}.\n        </p>\n        <p className=\"text-sm sm:text-base mt-2\">\n          In SVGs, the coordinate system starts at the top-left corner (0, 0).\n          X increases to the right, and Y increases downwards.\n        </p>\n      </div>\n\n      <div className=\"bg-gray-100 p-4 rounded-lg\">\n        <h2 className=\"text-lg sm:text-xl font-semibold mb-2\">SVG Code</h2>\n        <pre className=\"bg-gray-800 text-white p-2 rounded overflow-x-auto text-xs sm:text-sm\">\n          {`<svg width=\"${svgSize}\" height=\"${svgSize}\">\n  <rect width=\"100%\" height=\"100%\" fill=\"lightgrey\" />\n  <rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" fill=\"${color}\" />\n</svg>`}\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nexport default SVGLearningApp;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SVGLearningApp from './SVGLearningApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/svg-learning-app\">\n      <div className=\"App app-container\">\n        <Routes>\n          <Route path=\"/\" element={<SVGLearningApp />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';  // Import Bootstrap CSS\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}